# start with a complete data set
compl_boys <- cc(boys)[1:3]
library(mice)
# start with a complete data set
compl_boys <- cc(boys)[1:3]
compl_boys
# Perform amputation with default settings
mads_boys <- ampute(data = compl_boys)
mads_boys
mads_boys$amp
compl_boys
# Perform amputation with default settings
mads_boys <- ampute(data = compl_boys)
mads_boys$amp
# Change default matrices as desired
my_patterns <- mads_boys$patterns
my_patterns[1:3, 2] <- 0
my_weights <- mads_boys$weights
my_weights[2, 1] <- 2
my_weights[3, 1] <- 0.5
# Rerun amputation
my_mads_boys <- ampute(data = compl_boys, patterns = my_patterns, freq =
c(0.3, 0.3, 0.4), weights = my_weights, type = c("RIGHT", "TAIL", "LEFT"))
my_mads_boys$amp
mads_boys
compl_boys
quit
quit()
quit()
15*22000*4
15*2200*4
15*2200*4+15,231
15*2200*4+15231
50000/2200
30*2200
citation('lme4')
#----junp_169_OASIS_ODSIS----#
rm(list = ls())
d <- data.frame()
d <- rbind(c("2020-09-08", 12, 15),
c("2020-09-15", 14, 15),
c("2020-09-23", 10, 12),
c("2021-01-29", 7, 9),
c("2021-02-03", 8, 8),
c("2021-02-10", 9, 11),
d
)
colnames(d) <- c("date", "OASIS", "ODSIS")
d$date <- as.Date(d$date)
d[,c("OASIS", "ODSIS")] <- sapply(d[,c("OASIS", "ODSIS")], as.numeric)
plot(d$date, d$OASIS,
xlab = "Date", ylab = "Score")
lines(d$date, d$OASIS, col="blue")
lines(d$date, d$ODSIS, col="red", type = "b")
legend(d$date[nrow(d)-2], 9 , legend = c("OASIS", "ODSIS"), col = c("blue", "red"), lty = 2:3)
#----junp_169_OASIS_ODSIS----#
rm(list = ls())
d <- data.frame()
d <- rbind(c("2020-09-08", 12, 15),
c("2020-09-15", 14, 15),
c("2020-09-23", 10, 12),
c("2021-01-29", 7, 9),
c("2021-02-03", 8, 8),
c("2021-02-10", 9, 11),
d
)
colnames(d) <- c("date", "OASIS", "ODSIS")
#d$date <- as.Date(d$date)
d[,c("OASIS", "ODSIS")] <- sapply(d[,c("OASIS", "ODSIS")], as.numeric)
plot(d$date, d$OASIS,
xlab = "Date", ylab = "Score")
d$date
d$OASIS
plot(d$date, d$OASIS,
xlab = "Date", ylab = "Score")
colnames(d) <- c("date", "OASIS", "ODSIS")
#d$date <- as.Date(d$date)
d[,c("OASIS", "ODSIS")] <- sapply(d[,c("OASIS", "ODSIS")], as.numeric)
plot(d$date, d$OASIS,
xlab = "Date", ylab = "Score")
d$date <- as.Date(d$date)
d[,c("OASIS", "ODSIS")] <- sapply(d[,c("OASIS", "ODSIS")], as.numeric)
plot(d$date, d$OASIS,
xlab = "Date", ylab = "Score")
lines(d$date, d$OASIS, col="blue")
lines(d$date, d$ODSIS, col="red", type = "b")
?plot()
plot(d$date, d$OASIS,
ylim = c(0, 25),
xlab = "Date", ylab = "Score")
lines(d$date, d$OASIS, col="blue")
lines(d$date, d$ODSIS, col="red", type = "b")
legend(d$date[nrow(d)-2], 9 , legend = c("OASIS", "ODSIS"), col = c("blue", "red"), lty = 2:3)
legend(d$date[nrow(d)-2], 9 , legend = c("OASIS", "ODSIS"), col = c("blue", "red"), lty = 5:3)
legend(d$date[nrow(d)-2], 9 , legend = c("OASIS", "ODSIS"), col = c("blue", "red"), lty = 3:3)
legend(d$date[nrow(d)-2], 9 , legend = c("OASIS", "ODSIS"), col = c("blue", "red"), lty = 1:1)
?legend()
legend(d$date[nrow(d)-2],
9 ,
legend = c("OASIS", "ODSIS"),
col = c("blue", "red"),
lty = 1:1)
legend(d$date[nrow(d)-2],
#       9 ,
legend = c("OASIS", "ODSIS"),
col = c("blue", "red"),
lty = 1:1)
legend(d$date[nrow(d)-2],
legend = c("OASIS", "ODSIS"),
col = c("blue", "red"),
adj = c(1,1),
lty = 1:1)
legend(d$date[nrow(d)-2],
legend = c("OASIS", "ODSIS"),
col = c("blue", "red"),
adj = c(1,10),
lty = 1:1)
legend(d$date[nrow(d)-2],
legend = c("OASIS", "ODSIS"),
col = c("blue", "red"),
adj = c(1,10),
lty = 1:1)
legend(d$date[nrow(d)-2],
legend = c("OASIS", "ODSIS"),
col = c("blue", "red"),
adj = c(10,10),
lty = 1:1)
legend(d$date[nrow(d)-2],
legend = c("OASIS", "ODSIS"),
col = c("blue", "red"),
adj = c(10,10),
lty = 1:1)
legend(d$date[nrow(d)-2],
legend = c("OASIS", "ODSIS"),
col = c("blue", "red"),
adj = c(100,10),
lty = 1:1)
x <- c(9, 8, 8)
x
x <- c(9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 4)
xm <- x/length(x)
length(x)
x/length(x)
xm <- sum(x)/length(x)
xm
sum((x-xm)^2)/length(x)
quit()
rm(list = ls())
quit()
getwd()
simdata2<-read.csv("SIMR_RW_example.csv")
simdata2<-read.csv("power_analysis/SIMR_RW_example.csv")
head(simdata2)
hist(simdata2$Pr_rate)
model1 <- glmer(Pr_rate ~ Day + (1|Doctor), family="poisson", data=simdata2)
library(lme4)
model1 <- glmer(Pr_rate ~ Day + (1|Doctor), family="poisson", data=simdata2)
summary(model1)
fixef(model1)["Day"]
fixef(model1)
fixef(model1)["Day"] <- -0.06 #change effect to about half
fixef(model1)["Day"]
fixef(model1)["Day"] <- -0.06
fixef(model1)["Day"] <- 0.06 #change effect to about half
fixef(model1)["Day"] #view effect
fixef(model1)[, c("Day")] <- -0.06 #change effect to about half
fixef(model1)[, "Day"] #view effect
fixef(model1)
fixef(model1)["Day"] #view effect
fixef(model1)[, c("Day")] #view effect
fixef(model1)[["Day"]] #view effect
fixef(model1)[["Day"]] <- -0.06 #change effect to about half
fixef(model1)[["Day"]] <- 0.06 #change effect to about half
fixef(model1)[["Day"]] <- "0.06" #change effect to about half
fixef(model1)[["Day"]] #view effect
fixef(model1)["Day"] #view effect
fixef(model1)["Day"] <- fixef(model1)["Day"]/2 #change effect to about half
fixef(model1)[["Day"]] <- fixef(model1)[["Day"]]/2 #change effect to about half
fixef(model1)/2
fixef(model1)[]
fixef(model1)[1]
fixef(model1)[2]
fixef(model1)[2] <- 2
fixef(model1)[2]
fixef(model1)[[2]]
fixef(model1)[[2]] <- 2
fixef(model1)[which(fixef(model1)["Day"])]
fixef(model1)[which(fixef(model1)["Day"]),]
fixef(model1)[which(fixef(model1))]
fixef(model1)[which(fixef(model1)),]
fixef(model1)["Day"] #view effect
fixef(model1)[["Day"]] #view effect
fixef(model1)[2] #view effect
fixef(model1)[2,2] #view effect
fixef(model1)[2] #view effect
fixef(model1)[[2]] #view effect
fixef(model1)[[2]] <- 2 #view effect
fixef(model1)[[2]] <- fixef(model1)[[0.6]] #view effect
View(model1)
powerSim(model1)
library(simr)
powerSim(model1)
model2 <- extend(model1, along="Day", n=20)
powerSim(model2)
#4) POWER CURVE
pc2 <- powerCurve(model2)
print(pc2)
plot(pc2)
# Example 3: Simulation w/o Data R Code ----
rm(list = ls())
#1) GET DATA
## create covariates
subj <- factor(1:10)
subj
class_id <- letters[1:5]
class_id
time <- 0:2
time
group <- c("control", "intervention")
group
subj_full <- rep(subj, 15)
subj_full
class_full <- rep(rep(class_id, each=10), 3)
class_full
time_full <- rep(time, each=50)
time_full
group_full <- rep(rep(group, each=5), 15)
group_full
covars <- data.frame(id=subj_full, class=class_full, treat=group_full, time=factor(time_full))
View(covars)
## covars
## Intercept and slopes for intervention, time1, time2, intervention:time1, intervention:time2
fixed <- c(5, 0, 0.1, 0.2, 1, 0.9)
## Random intercepts for participants clustered by class
rand <- list(0.5, 0.1)
## residual variance
res <- 2
#2) CREATE MODEL
model <- makeLmer(y ~ treat*time + (1|class/id), fixef=fixed, VarCorr=rand, sigma=res, data=covars)
?makeLmer
model
#3) SIMULATE POWER
sim_treat <- powerSim(model, nsim=100, test = fcompare(y~time))
sim_treat
sim_time <- powerSim(model, nsim=100, test = fcompare(y~treat))
sim_time
#4) POWER CURVE
## changing effect size
model_large <- model
fixef(model_large)['treatintervention:time1'] <- 2
fixef(model_large)['treatintervention:time1']
sim_treat_large <- powerSim(model_large, nsim=100, test = fcompare(y~time))
sim_treat_large
## changing number of classes
model_ext_class <- extend(model, along="class", n=20)
model_ext_class
sim_treat_class <- powerSim(model_ext_class, nsim=100, test = fcompare(y~time))
sim_treat_class
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~time), along="class")
plot(p_curve_treat)
model_ext_class <- extend(model, along="class", n=20)
model_ext_class
sim_treat_class <- powerSim(model_ext_class, nsim=100, test = fcompare(y~time))
sim_treat_class
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~time), along="class")
plot(p_curve_treat)
## changing number within classes
model_ext_subj <- extend(model, within="class+treat+time", n=20)
model_ext_subj
sim_treat_subj <- powerSim(model_ext_subj, nsim=100, test = fcompare(y~time))
sim_treat_subj
p_curve_treat <- powerCurve(model_ext_subj, test=fcompare(y~time), within="class+treat+time", breaks=c(5,10,15,20))
plot(p_curve_treat)
## changing both
model_final <- extend(model, along="class", n=8)
model_final <- extend(model_final, within="class+treat+time", n=10)
sim_final <- powerSim(model_final, nsim=100, test = fcompare(y~time))
sim_final
image("power_analysis/results.RData")
save.image("power_analysis/results.RData")
quit()
sim_treat_large
plot(p_curve_treat)
c
plot(p_curve_treat)
sim_final
sim_treat_subj
sim_treat_class
print(pc2)
plot(pc2)
#4) POWER CURVE
pc2 <- powerCurve(model2)
model2 <- extend(model1, along="Day", n=20)
#3) SIMULATE POWER
powerSim(model1)
#2) CREATE MODEL
model1 <- glmer(Pr_rate ~ Day + (1|Doctor), family="poisson", data=simdata2)
# load data ----
load("power_analysis/results.RData")
print(pc2)
hist(simdata2$Pr_rate)
head(simdata2)
# example 1 ----
#1) GET DATA
simdata2<-read.csv("power_analysis/SIMR_RW_example.csv")
head(simdata2)
hist(simdata2$Pr_rate)
#2) CREATE MODEL
model1 <- glmer(Pr_rate ~ Day + (1|Doctor), family="poisson", data=simdata2)
summary(model1)
library(lme4)
library(simr)
#2) CREATE MODEL
model1 <- glmer(Pr_rate ~ Day + (1|Doctor), family="poisson", data=simdata2)
summary(model1)
fixef(model1)["Day"] #view effect
fixef(model1)["Day"] <- -0.06 #change effect to about half
#3) SIMULATE POWER
powerSim(model1)
rm(list = lis())
rm(list = ls())
library(lme4)
library(simr)
# load data ----
load("power_analysis/results.RData")
hist(simdata2$Pr_rate)
head(simdata2)
rm(list = ls())
# load data ----
load("power_analysis/results.RData")
model
sim_treat
sim_time
sim_treat_large
fixef(model_large)['treatintervention:time1']
model_ext_class
sim_treat_class
plot(p_curve_treat)
sim_treat_subj
plot(p_curve_treat)
install.packages("tidyverse", "ggpubr", "rstatix")
install.packages("tidyverse", "ggpubr", "rstatix")
install.packages("tidyverse", "ggpubr", "rstatix")
install.packages("tidyverse")
install.packages(install.packages("ggpubr"))
install.packages("rstatix")
4643/700
30/27
citation("ggplot2")
citation("dplyr")
citation("lavaan")
w1 <- structure(list(ID0 = c("007a275b3b24f4866a0d026503af0f3470f57bfc",
"007a275b3b24f4866a0d026503af0f3470f57bfc", "0225c47f9da2575d71468f753699a02b972de8ba",
"0225c47f9da2575d71468f753699a02b972de8ba", "02dc8096dff62e94c39ec3b0df26cd7dd2ed07aa",
"02dc8096dff62e94c39ec3b0df26cd7dd2ed07aa", "03099c4feb5d232d9c60e2bdd04434cde1741073",
"03099c4feb5d232d9c60e2bdd04434cde1741073", "03d255805fe183e1c3b1218fe08d7bba8ffc4d87",
"03d255805fe183e1c3b1218fe08d7bba8ffc4d87", "042746d2cd8a74b6e2bfa6a5645ae90c920cf3e1",
"042746d2cd8a74b6e2bfa6a5645ae90c920cf3e1", "046538c636e5ed4097ede61b9f6693b376c61119",
"046538c636e5ed4097ede61b9f6693b376c61119", "0489a242d084104452045fece4038cd45fba6d7a",
"0489a242d084104452045fece4038cd45fba6d7a", "06500c806172e86f835e5c21a052269dd222e30c",
"06500c806172e86f835e5c21a052269dd222e30c", "06917c5835230a589bbd5cbb40909cc45afd5c40",
"06917c5835230a589bbd5cbb40909cc45afd5c40", "06a9c55568e3f2d2d4bcef4534e5672ccc1323db",
"06a9c55568e3f2d2d4bcef4534e5672ccc1323db", "06ccbadee52b11e853eaab602f71c073a950cc85",
"06ccbadee52b11e853eaab602f71c073a950cc85", "06faa13b62f5f68089d595548638ca1b81d21b49",
"06faa13b62f5f68089d595548638ca1b81d21b49", "081d7c912e71b04e894dc21761db9ed531a99d11",
"081d7c912e71b04e894dc21761db9ed531a99d11", "08f23961db566bb51f8fa0ae37159a8d97320157",
"08f23961db566bb51f8fa0ae37159a8d97320157"), year = c(0, 1, 0,
1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
0, 1, 0, 1, 0, 1), SatisAvg = c(6, 5, 4, 4, 6.3333333333, 6,
5.3333333333, 5.6666666667, 6.3333333333, 6.3333333333, 6.3333333333,
7, 6, 6.3333333333, 6.6666666667, 3.6666666667, 6, 6, 6, 6, 6,
4.3333333333, 5.6666666667, 2.6666666667, 5.3333333333, 5, 6,
4.3333333333, 6.6666666667, 7)), .Names = c("ID0", "year", "SatisAvg"
), row.names = c(NA, -30L), class = "data.frame")
View(w1)
rm(list = ls())
library(lme4)
library(simr)
# load data ----
load("power_analysis/results.RData")
#1) GET DATA
## create covariates
subj <- factor(1:10)
class_id <- letters[1:5]
time <- 0:2
group <- c("control", "intervention")
subj_full <- rep(subj, 15)
class_full <- rep(rep(class_id, each=10), 3)
time_full <- rep(time, each=50)
group_full <- rep(rep(group, each=5), 15)
covars <- data.frame(id=subj_full, class=class_full, treat=group_full, time=factor(time_full))
View(covars)
model <- lmer(y ~ treat*time + (1|class/id), fixef=fixed, VarCorr=rand, sigma=res, data=covars)
model <- lmer(y ~ treat*time + (1|class/id), data=covars)
#2) CREATE MODEL
model <- makeLmer(y ~ treat*time + (1|class/id), fixef=fixed, VarCorr=rand, sigma=res, data=covars)
rm(list = ls())
library(lme4)
library(simr)
# load data ----
load("power_analysis/results.RData")
#1) GET DATA
## create covariates
subj <- factor(1:10)
class_id <- letters[1:5]
time <- 0:2
group <- c("control", "intervention")
subj_full <- rep(subj, 15)
class_full <- rep(rep(class_id, each=10), 3)
time_full <- rep(time, each=50)
group_full <- rep(rep(group, each=5), 15)
covars <- data.frame(id=subj_full, class=class_full, treat=group_full, time=factor(time_full))
## covars
## Intercept and slopes for intervention, time1, time2, intervention:time1, intervention:time2
fixed <- c(5, 0, 0.1, 0.2, 1, 0.9)
## Random intercepts for participants clustered by class
rand <- list(0.5, 0.1)
## residual variance
res <- 2
#2) CREATE MODEL
#2) CREATE MODEL
model <- makeLmer(y ~ treat*time + (1|class/id), fixef=fixed, VarCorr=rand, sigma=res, data=covars)
model
model <- lmer(y ~ treat*time + (1|class/id), data=covars)
View(covars)
table(covars$class)
#1) GET DATA
## create covariates
subj <- factor(1:10)
class_id <- letters[1:5]
time <- 0:1
group <- c("control", "intervention")
subj_full <- rep(subj, 15)
class_full <- rep(rep(class_id, each=10), 3)
time_full <- rep(time, each=50)
group_full <- rep(rep(group, each=5), 15)
covars <- data.frame(id=subj_full, class=class_full, treat=group_full, time=factor(time_full))
## create covariates
subj <- factor(1:10)
class_id <- letters[1:5]
time <- 0:1
group <- c("control", "intervention")
subj_full <- rep(subj, 15)
class_full <- rep(rep(class_id, each=10), 3)
time_full <- rep(time, each=75)
group_full <- rep(rep(group, each=5), 15)
covars <- data.frame(id=subj_full, class=class_full, treat=group_full, time=factor(time_full))
## covars
## Intercept and slopes for intervention, time1, time2, intervention:time1, intervention:time2
fixed <- c(5, 0, 0.1, 0.2, 1, 0.9)
## Random intercepts for participants clustered by class
rand <- list(0.5, 0.1)
## residual variance
res <- 2
#2) CREATE MODEL
model <- makeLmer(y ~ treat*time + (1|class/id), fixef=fixed, VarCorr=rand, sigma=res, data=covars)
## covars
## Intercept and slopes for intervention, time1, time2, intervention:time1, intervention:time2
fixed <- c(5, 0, 0.1, 1)
## Random intercepts for participants clustered by class
rand <- list(0.5, 0.1)
## residual variance
res <- 2
#2) CREATE MODEL
model <- makeLmer(y ~ treat*time + (1|class/id), fixef=fixed, VarCorr=rand, sigma=res, data=covars)
#2) CREATE MODEL
model <- makeLmer(y ~ treat*time + (1|id), fixef=fixed, VarCorr=rand, sigma=res, data=covars)
View(covars)
View(covars)
table(covars$class)
table(covars$id)
#1) GET DATA
## create covariates
subj <- factor(1:10)
class_id <- letters[1:5]
time <- 0:2
group <- c("control", "intervention")
subj_full <- rep(subj, 15)
class_full <- rep(rep(class_id, each=10), 3)
time_full <- rep(time, each=50)
group_full <- rep(rep(group, each=5), 15)
covars <- data.frame(id=subj_full, class=class_full, treat=group_full, time=factor(time_full))
##
#2) CREATE MODEL
model <- makeLmer(y ~ treat*time + (1|id), fixef=fixed, VarCorr=rand, sigma=res, data=covars)
#3) SIMULATE POWER
sim_treat <- powerSim(model, nsim=100, test = fcompare(y~time))
sim_treat
sim_time <- powerSim(model, nsim=100, test = fcompare(y~treat))
sim_time
#4) POWER CURVE
## changing effect size
model_large <- model
fixef(model_large)['treatintervention:time1'] <- 2
sim_treat_large <- powerSim(model_large, nsim=100, test = fcompare(y~time))
sim_treat_large
## changing number of classes
model_ext_class <- extend(model, along="class", n=20)
model_ext_class
sim_treat_class <- powerSim(model_ext_class, nsim=100, test = fcompare(y~time))
sim_treat_class
p_curve_treat <- powerCurve(model_ext_class, test=fcompare(y~time), along="class")
plot(p_curve_treat)
plot(p_curve_treat)
q()
q()
quit()
getwd()
quit()
q()
q()
q()
